# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Release Build

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build --if-present

    - name: Read version from package.json using jq
      id: get_version
      run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Check if release exists
      id: check_release
      run: |
        if gh release view v${{ steps.get_version.outputs.version }} > /dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash

    - name: Bump patch version
      if: steps.check_release.outputs.exists == 'true'
      id: bump_version
      run: |
        npm version patch --no-git-tag-version
        NEW_VERSION=$(jq -r .version package.json)
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
      shell: bash

    - name: Commit and push updated version
      if: steps.check_release.outputs.exists == 'true'
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git add package.json package-lock.json
        git commit -m "Bump version to ${{ steps.bump_version.outputs.version }}"
        git push

    - name: Determine final version
      id: final_version
      run: |
        if [ "${{ steps.check_release.outputs.exists }}" == "true" ]; then
          echo "version=${{ steps.bump_version.outputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${{ steps.get_version.outputs.version }}" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.final_version.outputs.version }}
        release_name: Release v${{ steps.final_version.outputs.version }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/xbox-app-sgdb-${{ steps.final_version.outputs.version }}.exe
        asset_name: xbox-app-sgdb-${{ steps.final_version.outputs.version }}.exe
        asset_content_type: application/octet-stream
